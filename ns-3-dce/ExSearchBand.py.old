#!/usr/bin/python
import os
import sys
import time
import math
from tables import *
from sumUdp import *
#from sumUdp import getMac

folderName ="data/"+"udp-20170403-133046"


fb = 20000000
nUE = 1
#Dlist =[100, 500, 1000, 5000, 6000, 7000]
#Dlist =[20, 50]
Dlist =[150, 200, 250, 300, 350, 400]

if not os.path.exists(folderName+"/allResults.txt"):
    fre= open(folderName+"/allResults.txt", 'w')
    fre.write("Number of UE\tDistance\tSINR\tMCS\tNumber of Bits\tTransport Block Size\tUDP Goodput\tTCP Goodput\tLoss Rate\tShannon Capacity\tNyquist Rate\tMCS Predict\tPredict based on TB size\n")
    fre.close()


#for all the runs, cp the default file, write variables fb into readme.txt
# in dataFolder, should also have allResults.txt

#inner folder should have pcap, result.txt

def runOnce(nUE, D, dataFolder, fb):
    if not os.path.exists(dataFolder+"/"+str(nUE)):
        os.mkdir(dataFolder+"/"+str(nUE))

    if not os.path.exists(dataFolder+"/"+str(nUE)+"/"+str(D)):
        os.mkdir(dataFolder+"/"+str(nUE)+"/"+str(D))

    else:
        print "alreay generated D="+str(D);
        return;

    innerFolder = dataFolder+"/"+str(nUE)+"/"+str(D)

    #if search direction changes, then step =/2

    #run once, and set to result +2m

    #for every D, we will create a folder, and the following will
    #be run several times in a for loop

    #put this into a function, which has two arguements, D, nUE

    #the one line result file will be written to the sub-folder and the top level result file D=0-8000km+nUE=1-8.txt

    #tryValue=18000000
    tryValue=15000000
    step = 2000000
    lossrate = 20

    #0 is decreasing 1 increasing
    searchD = 0
    nRun=0
    #run tcp first

    runstr = "./waf --run \"oneNewLTE --nUE=%d "%nUE+ " --D="+str(D)+" --disWifi=true --isUDP=0 --stopTime=10 --ns3::ConfigStore::Filename=../../lte.default\" ";
    print runstr
    os.system(runstr)
    result = getResult()
    tcpTh = result.th;
    print "tcpTh="+str(tcpTh)
    os.mkdir(innerFolder+"/tcp-pcap")
    #copy files to folder
    os.system("mv *.pcap "+innerFolder+"/tcp-pcap")
    os.system("make clean")


    while not (lossrate >= 7 and lossrate <= 10):
        runstr = "./waf --run \"oneNewLTE --nUE=%d "%nUE+ " --D="+str(D)+" --B=%d"%tryValue+" --disWifi=true --stopTime=10 --ns3::ConfigStore::Filename=../../lte.default\" ";
        print runstr
        os.system(runstr)
        result = getResult()
        print "get loss rate from result:"+str(result.loss) +"  "+str(result.th)
        nRun+=1;
        if (lossrate >= 7 and lossrate <= 10):
            break;

        if nRun ==1:
            tryValue = (result.th) * 1000000
            continue
        lossrate = result.loss
        if lossrate >10:
            if searchD == 1:
                step /=2
            tryValue -= step
            if tryValue<=0:
                tryValue=50
            searchD=0
        elif lossrate <7:
            if searchD == 0:
                step /=2
            tryValue += step
            searchD=1
        print "*****step="+str(step)
        print "*****try"+str(tryValue)
        print "*****searchD="+str(searchD);


    print "nRun="+str(nRun)

    re = getResult()
    re2 = getSINR()
    reMac = getMac()

    #TODO: need to use the weighted average of #rb of every user to calc the scale here
    scale = 0.24;
    shannon = math.log(1+float(re2.sinr)) * (fb /1000000.0) * scale;
    nyquist = (2* fb/ 1000000.0) * math.log(getNBits(reMac.mcs), 2) *scale


    print "Number of UE\tDistance\tSINR\tMCS\tNumber of Bits\tTransport Block Size\tUDP Goodput\tTCP Goodput\tLoss Rate\tShannon Capacity\tNyquist Rate\tMCS Predict\tPredict based on TB size"

    print "%d\t%d\t%s\t%d\t%d\t%d\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f"%(nUE, D, re2.sinr, reMac.mcs, getNBits(reMac.mcs), reMac.tbSize, re.th, tcpTh, re.loss, shannon, nyquist, 16.8*scale*getNBits(reMac.mcs), reMac.tbSize/1000.0 *8)


    os.mkdir(innerFolder+"/udp-pcap")
        #copy files to folder
    os.system("mv *.pcap "+innerFolder+"/udp-pcap")
    os.system("cp lte.default "+innerFolder+"/")

    fre= open(innerFolder+"/result.txt", 'w')
    fre.write("%d\t%d\t%s\t%d\t%d\t%d\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f"%(nUE, D, re2.sinr, reMac.mcs, getNBits(reMac.mcs), reMac.tbSize, re.th, tcpTh, re.loss, shannon, nyquist, 16.8*getNBits(reMac.mcs), reMac.tbSize/1000.0 *16))

    fre.close()

    fre= open(dataFolder+"/allResults.txt", 'a')

    fre.write("%d\t%d\t%s\t%d\t%d\t%d\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f\t%.4f\n"%(nUE, D, re2.sinr, reMac.mcs, getNBits(reMac.mcs), reMac.tbSize, re.th, tcpTh, re.loss, shannon, nyquist, 16.8*getNBits(reMac.mcs), reMac.tbSize/1000.0 *16))
    fre.close()


    fdes =open(innerFolder+"/readme.txt", 'w');
    fdes.write(runstr);
    fdes.write("***********************\n")
    fdes.write("frequecy bandwidth ="+str(fb))
    fdes.close()
    os.system("make clean")

for ii in Dlist:
    runOnce(1, ii, folderName, fb)
